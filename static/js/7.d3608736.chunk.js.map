{"version":3,"sources":["u2-components/FormControl/FormControl.tsx","u2-components/FormControl/FormControl.module.css","utils/validator.tsx","u3-pages/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","childrenWrapperStyle","Textarea","props","input","restProps","Input","module","exports","required","value","maxLengthCreator","maxLength","length","LoginForm","handleSubmit","captchaUrl","onSubmit","CreateField","type","formSummaryError","placeholder","name","component","validators","text","validate","LoginReduxForm","reduxForm","form","Login","isAuth","to","login","formData","email","password","rememberMe","connect","state","authState"],"mappings":"0OAQMA,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACrEC,EAAWH,GAAWC,EAE5B,OACI,yBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,KACzD,yBAAKG,UAAWC,IAAEE,sBACdL,GAEHC,GAAY,8BAAOF,KAKjBO,EAAwC,SAACC,GAAW,IACvDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD+C,YACzBU,EADyB,mBAE7D,OAAO,kBAACX,EAAgBW,EAAO,8CAAcC,EAAUC,MAG7CC,EAAqC,SAACH,GAAW,IACpDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD4C,YACtBU,EADsB,mBAE1D,OAAO,kBAACX,EAAgBW,EAAO,2CAAWC,EAAUC,O,oBC3BvDE,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,qBAAuB,4C,iCCC3H,oEAAO,IAAMC,EAA+B,SAACC,GACzC,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uDCT3C,oOAcaE,EAEP,SAAC,GAIO,IAHJC,EAGG,EAHHA,aACApB,EAEG,EAFHA,MAEG,EADHqB,WAGP,OACI,0BAAMC,SAAUF,GACb,4CACA,wDACA,6CACCG,EAAY,QAAS,QAASZ,IAAO,CAACG,MACtCS,EAAY,WAAY,WAAYZ,IAAO,CAACG,KAAW,CAACU,KAAM,aAC9DD,EAAY,KAAM,aAAcZ,IAAO,GAAI,CAACa,KAAM,YAAa,eAChE,6BACG,0CAEFxB,GAAS,yBAAKG,UAAWC,IAAEqB,kBAAmBzB,GAC/C,gCAMGuB,EAAc,SAACG,EAA4BC,EAAcC,EAAkCC,GAA7E,IAAqGrB,EAArG,uDAA6G,GAAIsB,EAAjH,uDAAwH,GAAxH,OACvB,6BACG,kBAAC,IAAD,eAAOJ,YAAaA,EAAaC,KAAMA,EAAMC,UAAWA,EAAWG,SAAUF,GAAgBrB,IAC5FsB,IAIFE,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,CAAmEd,GAW7EgB,EAA6D,SAAC3B,GAKxE,OAAIA,EAAM4B,OACA,kBAAC,IAAD,CAAUC,GAAI,aAIpB,yBAAKlC,UAAWC,IAAEkC,OACf,qCACA,kBAACN,EAAD,CAAgBV,SAXN,SAACiB,GACf/B,EAAM8B,MAAMC,EAASC,MAAOD,EAASE,SAAUF,EAASG,iBAmC/CC,uBANE,SAACC,GAAD,MAAwC,CACtDR,OAAQQ,EAAMC,UAAUT,UAK6D,CAACE,WAA1EK,CAAkFR","file":"static/js/7.d3608736.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from './FormControl.module.css'\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\r\n\r\ntype FormControlPropsType = {\r\n   meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n   const hasError = touched && error\r\n\r\n   return (\r\n       <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n          <div className={s.childrenWrapperStyle}>\r\n             {children}\r\n          </div>\r\n          {hasError && <span>{error}</span>}\r\n       </div>\r\n   )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n   return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n   return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__1PJOU\",\"error\":\"FormControl_error__152ty\",\"childrenWrapperStyle\":\"FormControl_childrenWrapperStyle__EdIP7\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return 'Field id required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}","import React, {FC} from 'react'\r\nimport s from './Login.module.css'\r\nimport {Field, InjectedFormProps, reduxForm, WrappedFieldProps} from 'redux-form'\r\nimport {connect} from 'react-redux'\r\nimport {Input} from '../../u2-components/FormControl/FormControl'\r\nimport {required} from '../../utils/validator'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {login} from '../../u4-redux/auth-reducer'\r\nimport {AppStateType} from '../../u4-redux/store'\r\n\r\ntype LoginFormOwnProps = {\r\n   captchaUrl?: string\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType,\r\n    LoginFormOwnProps> & LoginFormOwnProps>\r\n    = ({\r\n          handleSubmit,\r\n          error,\r\n          captchaUrl\r\n       }) => {\r\n\r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n          <p>Use test data</p>\r\n          <p>Email: free@samuraijs.com</p>\r\n          <p>Password: free</p>\r\n          {CreateField('email', 'email', Input, [required])}\r\n          {CreateField('password', 'password', Input, [required], {type: 'password'})}\r\n          {CreateField(null, 'rememberMe', Input, [], {type: 'checkbox'}, 'remember me')}\r\n          <div>\r\n             <button>Login</button>\r\n          </div>\r\n          {error && <div className={s.formSummaryError}>{error}</div>}\r\n          <div>\r\n          </div>\r\n       </form>\r\n   )\r\n}\r\n\r\nexport const CreateField = (placeholder: string | null, name: string, component: FC<WrappedFieldProps>, validators: Array<any>, props = {}, text = '') => (\r\n    <div>\r\n       <Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/>\r\n       {text}\r\n    </div>\r\n)\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype LoginFormValuesType = {\r\n   // captcha?: boolean\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n}\r\n\r\ntype OwnProps = {}\r\n\r\nexport const Login: React.FC<MapStateType & MapDispatchType & OwnProps> = (props) => {\r\n   const onSubmit = (formData: LoginFormValuesType) => {\r\n      props.login(formData.email, formData.password, formData.rememberMe)\r\n   }\r\n\r\n   if (props.isAuth) {\r\n      return <Redirect to={'/profile'}/>\r\n   }\r\n\r\n   return (\r\n       <div className={s.login}>\r\n          <h1>Login</h1>\r\n          <LoginReduxForm onSubmit={onSubmit}/>\r\n       </div>\r\n\r\n   )\r\n}\r\n\r\ntype MapStateType = {\r\n   captchaUrl?: string | null\r\n   isAuth: boolean\r\n}\r\n\r\ntype MapDispatchType = {\r\n   login: (email: string,\r\n           password: string,\r\n           rememberMe: boolean\r\n           // captcha?: boolean\r\n   ) => void\r\n}\r\n\r\nconst mapState = (state: AppStateType): MapStateType => ({\r\n   isAuth: state.authState.isAuth\r\n   // captcha?: boolean\r\n})\r\n\r\n\r\nexport default connect<MapStateType, MapDispatchType, OwnProps, AppStateType>(mapState, {login})(Login)\r\n"],"sourceRoot":""}