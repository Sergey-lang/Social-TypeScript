{"version":3,"sources":["u2-components/FormControl/FormControl.tsx","u2-components/FormControl/FormControl.module.scss","utils/validator.tsx","u3-pages/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styles","s","formControl","className","childrenWrapperStyle","fieldErrorWrapper","Textarea","props","input","restProps","Input","CreateField","placeholder","name","component","validators","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","LoginForm","handleSubmit","captchaUrl","onSubmit","type","src","alt","formSummaryError","LoginReduxForm","reduxForm","form","Login","isAuth","to","login","formData","email","password","rememberMe","captcha","connect","state","authState"],"mappings":"sRAQMA,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAErEC,EAAWH,GAAWC,EAEtBG,EAAM,UAAMC,IAAEC,YAAR,aAAwBH,EAAWE,IAAEJ,MAAQ,IAEzD,OACI,yBAAKM,UAAWH,GACb,yBAAKG,UAAWF,IAAEG,sBACdN,GAEJ,yBAAKK,UAAWF,IAAEI,mBAEZN,GAAY,8BAAOF,MAOtBS,EAAwC,SAACC,GAAW,IACvDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBZ,KAD+C,YACzBY,EADyB,mBAE7D,OAAO,kBAACb,EAAgBa,EAAO,8CAAcC,EAAUC,MAG7CC,EAAqC,SAACH,GAAW,IACpDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBZ,KAD4C,YACtBY,EADsB,mBAE1D,OAAO,kBAACb,EAAgBa,EACrB,2CAAWC,EAAUC,MAYdE,EAAc,SAACC,EAA4BC,EAAcC,EAAkCC,GAA7E,IAAqGR,EAArG,uDAA6G,GAAIS,EAAjH,uDAAwH,GAAxH,OACvB,6BACG,kBAAC,IAAD,eAAOJ,YAAaA,EACbC,KAAMA,EACNC,UAAWA,EACXG,SAAUF,GAENR,IACVS,K,oBCvDRE,EAAOC,QAAU,CAAC,YAAc,iCAAiC,qBAAuB,0CAA0C,MAAQ,6B,iCCC1I,oEAAO,IAAMC,EAA+B,SAACC,GACzC,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uDCT3C,+KAeaE,EAEP,SAAC,GAIO,IAHJC,EAGG,EAHHA,aACA7B,EAEG,EAFHA,MACA8B,EACG,EADHA,WAEP,OACI,0BAAMC,SAAUF,GACb,4CACA,wDACA,6CACCf,YAAY,QAAS,QAASD,IAAO,CAACU,MACtCT,YAAY,WAAY,WAAYD,IAAO,CAACU,KAAW,CAACS,KAAM,aAC9DlB,YAAY,KAAM,aAAcD,IAAO,GAAI,CAACmB,KAAM,YAAa,eAChE,6BAEIF,GAAc,yBAAKG,IAAKH,GAAcA,EAAYI,IAAI,aAE1D,6BACIJ,GAAchB,YAAY,oBAAqB,UAAWD,IAAO,CAACU,KAAW,KAEjF,6BACG,0CAEFvB,GAAS,yBAAKM,UAAWF,IAAE+B,kBAAmBnC,GAC/C,gCAMJoC,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,CAAmET,GAW7EW,EAA6D,SAAC7B,GAMxE,OAAIA,EAAM8B,OACA,kBAAC,IAAD,CAAUC,GAAI,aAIpB,yBAAKnC,UAAWF,IAAEsC,OACf,qCACA,kBAACN,EAAD,CAAgBL,SAXN,SAACY,GACfjC,EAAMgC,MAAMC,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAUrCjB,WAAYpB,EAAMoB,eAyBjDkB,uBANE,SAACC,GAAD,MAAwC,CACtDT,OAAQS,EAAMC,UAAUV,OACxBV,WAAYmB,EAAMC,UAAUpB,cAIyD,CAACY,WAA1EM,CAAkFT","file":"static/js/7.1d2279c2.chunk.js","sourcesContent":["import React, {FC} from 'react'\r\nimport s from './FormControl.module.scss'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\r\n\r\ntype FormControlPropsType = {\r\n   meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n   const hasError = touched && error\r\n\r\n   const styles = `${s.formControl}  ${hasError ? s.error : ''}`\r\n\r\n   return (\r\n       <div className={styles}>\r\n          <div className={s.childrenWrapperStyle}>\r\n             {children}\r\n          </div>\r\n          <div className={s.fieldErrorWrapper}>\r\n             {\r\n                hasError && <span>{error}</span>\r\n             }\r\n          </div>\r\n       </div>\r\n   )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n   return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n   return <FormControl {...props}>\r\n      <input {...input}{...restProps}/>\r\n   </FormControl>\r\n}\r\n\r\nexport const Checkbox: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n   return <FormControl {...props}>\r\n      <input {...input}{...restProps}/>\r\n   </FormControl>\r\n}\r\n\r\n//create wrapper\r\nexport const CreateField = (placeholder: string | null, name: string, component: FC<WrappedFieldProps>, validators: Array<any>, props = {}, text = '') => (\r\n    <div>\r\n       <Field placeholder={placeholder}\r\n              name={name}\r\n              component={component}\r\n              validate={validators}\r\n\r\n              {...props}/>\r\n       {text}\r\n    </div>\r\n)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__31cRM\",\"childrenWrapperStyle\":\"FormControl_childrenWrapperStyle__e9-0i\",\"error\":\"FormControl_error__2QYvd\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return 'Field id required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\nexport const minLengthCreator = (minLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length <= minLength) return `Min length is ${minLength} symbols`;\r\n\r\n    return undefined;\r\n}","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {connect} from 'react-redux'\r\nimport {CreateField, Input} from '../../u2-components/FormControl/FormControl'\r\nimport {required} from '../../utils/validator'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {login} from '../../u4-redux/auth-reducer'\r\nimport {AppStateType} from '../../u4-redux/store'\r\n\r\nimport s from './Login.module.css'\r\n\r\ntype LoginFormOwnProps = {\r\n   captchaUrl: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType,\r\n    LoginFormOwnProps> & LoginFormOwnProps>\r\n    = ({\r\n          handleSubmit,\r\n          error,\r\n          captchaUrl\r\n       }) => {\r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n          <p>Use test data</p>\r\n          <p>Email: free@samuraijs.com</p>\r\n          <p>Password: free</p>\r\n          {CreateField('email', 'email', Input, [required])}\r\n          {CreateField('password', 'password', Input, [required], {type: 'password'})}\r\n          {CreateField(null, 'rememberMe', Input, [], {type: 'checkbox'}, 'remember me')}\r\n          <div>\r\n             {/*captchaUrl without '&&' check don't work! Because null*/}\r\n             {captchaUrl && <img src={captchaUrl && captchaUrl} alt=\"captcha\"/>}\r\n          </div>\r\n          <div>\r\n             {captchaUrl && CreateField('Symbol of captcha', 'captcha', Input, [required], {})}\r\n          </div>\r\n          <div>\r\n             <button>Login</button>\r\n          </div>\r\n          {error && <div className={s.formSummaryError}>{error}</div>}\r\n          <div>\r\n          </div>\r\n       </form>\r\n   )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype LoginFormValuesType = {\r\n   captcha: string | null //this type name have to match with field name 'captcha'\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n}\r\n\r\ntype OwnProps = {}\r\n\r\nexport const Login: React.FC<MapStateType & MapDispatchType & OwnProps> = (props) => {\r\n\r\n   const onSubmit = (formData: LoginFormValuesType) => {\r\n      props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n   }\r\n\r\n   if (props.isAuth) {\r\n      return <Redirect to={'/profile'}/>\r\n   }\r\n\r\n   return (\r\n       <div className={s.login}>\r\n          <h1>Login</h1>\r\n          <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n       </div>\r\n\r\n   )\r\n}\r\n\r\ntype MapStateType = {\r\n   captchaUrl: string | null\r\n   isAuth: boolean\r\n}\r\n\r\ntype MapDispatchType = {\r\n   login: (email: string,\r\n           password: string,\r\n           rememberMe: boolean,\r\n           captcha: string | null\r\n   ) => void\r\n}\r\n\r\nconst mapState = (state: AppStateType): MapStateType => ({\r\n   isAuth: state.authState.isAuth,\r\n   captchaUrl: state.authState.captchaUrl\r\n})\r\n\r\n\r\nexport default connect<MapStateType, MapDispatchType, OwnProps, AppStateType>(mapState, {login})(Login)\r\n"],"sourceRoot":""}