{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","u3-pages/Chat/ChatPage.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","m","Message","message","key","src","photo","width","alt","userName","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","onClick","send","disabled","ChatPage"],"mappings":"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","file":"static/js/9.1ce43e9e.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useEffect, useState} from 'react';\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Chat: React.FC = () => {\r\n    //web socket object which set after creat.At start == null. Availability for other.\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    //after render in chat use Effect create socket\r\n    //there is one problem! You can't connect because render happened earlier!\r\n    useEffect(() => {\r\n        //our channel type\r\n        let ws: WebSocket;\r\n        //---show close and create new channel\r\n        const closeHandler = () => {\r\n            console.log('CLOSE WS')\r\n            //reconnect\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n        //2----call\r\n        function createChannel() {\r\n            //before create new socket we can clear old listener\r\n            ws?.removeEventListener('close', closeHandler)\r\n            //close ws channel\r\n            ws?.close()\r\n\r\n            //3----create channel\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n            //4----subscribe on close(we can know)\r\n            ws?.addEventListener('close', closeHandler)\r\n            //5----set ws channel in local state\r\n            setWsChannel(ws)\r\n        }\r\n        //1----create channel after render\r\n        createChannel()\r\n\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Messages wsChannel={wsChannel}/>\r\n            <AddMessageForm wsChannel={wsChannel}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Messages: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: MessageEvent) => {\r\n            const newMessages = JSON.parse(e.data);\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        }\r\n\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n\r\n    }, [wsChannel])\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}}>\r\n            {messages.map((m, i) => <Message message={m} key={i}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Message: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} width={30} alt=\"\"/><b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddMessageForm: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    //textarea changer\r\n    const [message, setMessage] = useState('')\r\n    //ws status, use for button\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    useEffect(() => {\r\n\r\n        let openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n        //check ws and add listener, set status 'READY'\r\n        wsChannel?.addEventListener('open', openHandler)\r\n\r\n        //remove listener after close\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={sendMessage} disabled={wsChannel === null || readyStatus !== 'ready'}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}